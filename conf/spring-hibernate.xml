<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx  
        				http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">  
 
 <!-- 引入配置文件 -->  
 <bean id="propertyConfigurer"  
     class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
     <property name="location" value="classpath:jdbc.properties" />  
 </bean>
<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"  
    destroy-method="close">  
    <property name="driverClassName" value="${driver}" />  
    <property name="url" value="${url}" />  
    <property name="username" value="${username}" />  
    <property name="password" value="${password}" />  
    <!-- 初始化连接大小 -->  
    <property name="initialSize" value="${initialSize}"></property>  
    <!-- 连接池最大数量 -->  
    <property name="maxActive" value="${maxActive}"></property>  
    <!-- 连接池最大空闲 -->  
    <property name="maxIdle" value="${maxIdle}"></property>  
    <!-- 连接池最小空闲 -->  
    <property name="minIdle" value="${minIdle}"></property>  
    <!-- 获取连接最大等待时间 -->  
    <property name="maxWait" value="${maxWait}"></property>  
</bean> 
<!-- sessionFactory配置，另一种方式：<bean id="mySessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"> -->
<bean id="sessionFactory"  
        class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">  
        <property name="dataSource">  
            <ref bean="dataSource" />           
        </property>  
        <!-- 全包扫描必须设置成实体类的上两层以上包！！！ -->  
        <!-- <property name="packagesToScan" value="com.yunhai.*" />   -->
        <!-- 下面这个属性可以有多种如mappingResource等 -->
         <property name="mappingLocations">
          <list>
             <value>classpath:/com/yunhai/model/*.hbm.xml</value>
          </list>
         </property>
        <property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl}</prop>  
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>  
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>  
                <prop key="hibernate.query.factory_class">org.hibernate.hql.ast.ASTQueryTranslatorFactory</prop>  
                <prop key="connection.useUnicode">true</prop>  
                <prop key="connection.characterEncoding">UTF-8</prop>  
            </props>  
        </property>  
</bean>  
<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
       <property name="sessionFactory" ref="sessionFactory" ></property>
</bean>
<!-- 配置事务管理器 -->  
<bean id="transactionManager"  
    class="org.springframework.orm.hibernate3.HibernateTransactionManager"  lazy-init="false"><!--  destroy-method="close" -->  
    <property name="sessionFactory" ref="sessionFactory" />  
    <property name="globalRollbackOnParticipationFailure" value="false" />          
</bean>  
 <!-- (2)加入注解事务管理器 -->
<tx:annotation-driven transaction-manager="transactionManager"/>
 <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
 <!-- <bean id="transactionManager"  
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
    <property name="dataSource" ref="dataSource" />  
</bean>  --> 
<!-- 5. 使用声明式事务  
         transaction-manager：引用上面定义的事务管理器  
     -->  
<!-- <tx:annotation-driven transaction-manager="transactionManager" />  --> 
 </beans>                       