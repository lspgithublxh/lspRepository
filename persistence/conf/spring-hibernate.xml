<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx  
        				http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        				http://www.springframework.org/schema/aop 
        				http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
        				http://www.springframework.org/schema/security 
        				http://www.springframework.org/schema/security/spring-security-4.2.xsd ">  
 
 <!-- 引入配置文件 -->  
 <!-- <bean id="propertyConfigurer"  
     class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
     <property name="location" value="classpath:jdbc-hibernate.properties" />  
 </bean> -->
<context:property-placeholder location="classpath:/jdbc-hibernate.properties" />
<!--配置数据源-->
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass" value="com.mysql.cj.jdbc.Driver" />  <!--数据库连接驱动-->
    <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/mydatabases?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC" />     <!--数据库地址-->
    <property name="user" value="root" />   <!--用户名-->
    <property name="password" value="lsp" />   <!--密码-->
    <property name="maxPoolSize" value="40" />      <!--最大连接数-->
    <property name="minPoolSize" value="1" />       <!--最小连接数-->
    <property name="initialPoolSize" value="1" />      <!--初始化连接池内的数据库连接-->
    <property name="maxIdleTime" value="20" />  <!--最大空闲时间-->
</bean>

 <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->   
<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
       <property name="dataSource" ref="dataSource" />
       <property name="packagesToScan" value="com.construct.persistence.entity" />
       <!-- <property name="annotatedClasses"> -->
       <property name="hibernateProperties">
           <props>
               <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop> <!--hibernate根据实体自动生成数据库表-->
               <prop key="hibernate.dialect">${hibernate.dialect}</prop>   <!--指定数据库方言-->
               <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>     <!--在控制台显示执行的数据库操作语句-->
               <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>     <!--在控制台显示执行的数据哭操作语句（格式）-->
           </props>
       </property>
</bean>  
<!-- hibernate方式 -->

<!-- 5. 使用声明式事务  
     transaction-manager：引用上面定义的事务管理器  
     -->  
<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
      <property name="sessionFactory" ref="sessionFactory" />
</bean>
<tx:annotation-driven transaction-manager="transactionManager" />  

<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true" />
            <tx:method name="*" />
        </tx:attributes>
</tx:advice>
<aop:config>
    <aop:pointcut expression="execution(* com.construct.*.service.*.*(..))"
        id="txPointcut" />
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
</aop:config>

<!-- 安全需要的 -->

<!--security最基本配置， 一是登录时的认证， 二是任何httpweb请求的权权匹配检查，配则放过不配则拦截-->
    <!--可以改成入口点配置，来加入自己的filter基本加密 -->
	<!--自动配置还会在首次访问时(没有session,securityContext)时返回自己的登录界面 -->
	<!-- 静态资源不拦截 -->
	<security:http pattern="*.css" security="none"></security:http>
	<security:http pattern="*.js" security="none"></security:http>
	<security:http pattern="/view/login.html" security="none"></security:http>
	<security:http pattern="/user/login" security="none"></security:http>
    <security:http auto-config="true">
    	<security:form-login 
    		always-use-default-target="true" 
    		login-page="/view/login.html"
    		default-target-url="/welcome"
    		authentication-failure-url="/login?error"
			authentication-success-forward-url="/user/page2" />
       <!--特殊专门拦截请求1 权限相关，会在每次请求的时候都可能被使用，但认证则只会在session未建立的时候、securityContext未建立的时候-->
       <!-- 通道访问可以设置requires-channel="https"  -->
        <security:intercept-url pattern="/admin" 
            access="hasRole('ROLE_ADMIN')" /> 
		<!--特殊专门拦截请求2 -->
		<security:access-denied-handler error-page="/403"/>
        <security:intercept-url pattern="/data" access="hasRole('ROLE_USER')" />
        <!-- 全部拦截 -->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
		<!--用基本验证 来覆盖前面的自动配置；本质上即加了“基本过滤Filter” -->
        <security:http-basic />
		<!--登出配置 -->
		<security:logout logout-success-url="/login?logout"/>
		<!-- 暂时不跨域认证拦截，即先放弃这种安全机制，以后增加这种机制 -->
		<security:csrf disabled="true" />
		<!--实行摘要认证 ,前面添加过滤器 (实现AbstractSecurityInterceptor 接口),只知道请求，是不知道用户信息和权限信息的-->
		<!--<security:custom-filter ref="digestFilter" position="BASIC_AUTH_FILTER" />
			<custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>, -->
		
</security:http>
<security:authentication-manager >
        <security:authentication-provider >
             <!-- <security:user-service id="userService">
                <security:user authorities="ROLE_USER" name="tom"
                    password="tom" />
                <security:user authorities="ROLE_USER, ROLE_ADMIN"
                    name="admin" password="admin" />
            </security:user-service> -->
            
             <security:jdbc-user-service data-source-ref="dataSource"
                                        users-by-username-query="select username,password, enabled from users where username = ?"
                                        authorities-by-username-query="select username, role from user_roles where username = ?"/>
             
                    </security:authentication-provider>
</security:authentication-manager>
 </beans>                       